import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext {
        kotlinVersion = '1.2.41'
        springBootVersion = '2.0.2.RELEASE'
        kotlinterVersion = '1.7.0'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'pl.simplecoding'
version = '1.0.0'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

task buildFrontDev(type: Exec) {
    workingDir '../client'
    commandLine 'ng', 'build', '--base-href', 'http://localhost:8080', '--prod'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'xcopy', 'dist\\prediction-app', '..\\server\\src\\main\\resources\\static'
    } else {
        commandLine 'cp', '-a', '/dist/prediction-app/', '../server/src/main/resources/static'
    }
}

task buildFrontProdMs(type: Exec) {
    workingDir '../client'
    commandLine 'ng', 'build', '--base-href', "${System.getenv('MS_PRED_APP_URL') ?: 'http://localhost'}:${System.getenv('MS_PRED_APP_PORT') ?: '8080'}", '--prod'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'xcopy', 'dist\\prediction-app', '..\\server\\src\\main\\resources\\static'
    } else {
        commandLine 'cp', '-a', '/dist/prediction-app/', '../server/src/main/resources/static'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.liquibase:liquibase-core')
    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('org.jetbrains.kotlin:kotlin-reflect')
    compile('io.github.microutils:kotlin-logging:1.5.4')
    compile('com.github.dblock.waffle:waffle-spring-security4:1.8.1')
    compile('com.github.dblock.waffle:waffle-tomcat8:1.8.1')
    compile('mysql:mysql-connector-java:5.1.38')
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
}
